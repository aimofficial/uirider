// Generated by view binder compiler. Do not edit!
package com.newtaxiprime.user.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.newtaxiprime.user.R;
import com.newtaxiprime.user.appcommon.custompalette.FontTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AppPeekPricingBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final FontTextView PeakPriceDescription;

  @NonNull
  public final ConstraintLayout cvAccept;

  @NonNull
  public final Guideline fareInnerContentGuidline;

  @NonNull
  public final Guideline guideline;

  @NonNull
  public final RelativeLayout headerLayout;

  @NonNull
  public final ImageView imgvuCloseIcon;

  @NonNull
  public final ConstraintLayout peakCircle;

  @NonNull
  public final ConstraintLayout textView;

  @NonNull
  public final FontTextView tvAcceptHigherPrice;

  @NonNull
  public final FontTextView tvHeading;

  @NonNull
  public final FontTextView tvKmStaticText;

  @NonNull
  public final FontTextView tvMinStaticText;

  @NonNull
  public final FontTextView tvMinimumFare;

  @NonNull
  public final FontTextView tvMinimumFareStaticText;

  @NonNull
  public final FontTextView tvNormalFare;

  @NonNull
  public final FontTextView tvPeakPricePercentage;

  @NonNull
  public final FontTextView tvPerDistance;

  @NonNull
  public final FontTextView tvPerMinutes;

  @NonNull
  public final FontTextView tvTryLaterHigherPrice;

  private AppPeekPricingBinding(@NonNull RelativeLayout rootView,
      @NonNull FontTextView PeakPriceDescription, @NonNull ConstraintLayout cvAccept,
      @NonNull Guideline fareInnerContentGuidline, @NonNull Guideline guideline,
      @NonNull RelativeLayout headerLayout, @NonNull ImageView imgvuCloseIcon,
      @NonNull ConstraintLayout peakCircle, @NonNull ConstraintLayout textView,
      @NonNull FontTextView tvAcceptHigherPrice, @NonNull FontTextView tvHeading,
      @NonNull FontTextView tvKmStaticText, @NonNull FontTextView tvMinStaticText,
      @NonNull FontTextView tvMinimumFare, @NonNull FontTextView tvMinimumFareStaticText,
      @NonNull FontTextView tvNormalFare, @NonNull FontTextView tvPeakPricePercentage,
      @NonNull FontTextView tvPerDistance, @NonNull FontTextView tvPerMinutes,
      @NonNull FontTextView tvTryLaterHigherPrice) {
    this.rootView = rootView;
    this.PeakPriceDescription = PeakPriceDescription;
    this.cvAccept = cvAccept;
    this.fareInnerContentGuidline = fareInnerContentGuidline;
    this.guideline = guideline;
    this.headerLayout = headerLayout;
    this.imgvuCloseIcon = imgvuCloseIcon;
    this.peakCircle = peakCircle;
    this.textView = textView;
    this.tvAcceptHigherPrice = tvAcceptHigherPrice;
    this.tvHeading = tvHeading;
    this.tvKmStaticText = tvKmStaticText;
    this.tvMinStaticText = tvMinStaticText;
    this.tvMinimumFare = tvMinimumFare;
    this.tvMinimumFareStaticText = tvMinimumFareStaticText;
    this.tvNormalFare = tvNormalFare;
    this.tvPeakPricePercentage = tvPeakPricePercentage;
    this.tvPerDistance = tvPerDistance;
    this.tvPerMinutes = tvPerMinutes;
    this.tvTryLaterHigherPrice = tvTryLaterHigherPrice;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AppPeekPricingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AppPeekPricingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.app_peek_pricing, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AppPeekPricingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.PeakPriceDescription;
      FontTextView PeakPriceDescription = ViewBindings.findChildViewById(rootView, id);
      if (PeakPriceDescription == null) {
        break missingId;
      }

      id = R.id.cv_accept;
      ConstraintLayout cvAccept = ViewBindings.findChildViewById(rootView, id);
      if (cvAccept == null) {
        break missingId;
      }

      id = R.id.fareInnerContentGuidline;
      Guideline fareInnerContentGuidline = ViewBindings.findChildViewById(rootView, id);
      if (fareInnerContentGuidline == null) {
        break missingId;
      }

      id = R.id.guideline;
      Guideline guideline = ViewBindings.findChildViewById(rootView, id);
      if (guideline == null) {
        break missingId;
      }

      id = R.id.header_layout;
      RelativeLayout headerLayout = ViewBindings.findChildViewById(rootView, id);
      if (headerLayout == null) {
        break missingId;
      }

      id = R.id.imgvu_close_icon;
      ImageView imgvuCloseIcon = ViewBindings.findChildViewById(rootView, id);
      if (imgvuCloseIcon == null) {
        break missingId;
      }

      id = R.id.peak_circle;
      ConstraintLayout peakCircle = ViewBindings.findChildViewById(rootView, id);
      if (peakCircle == null) {
        break missingId;
      }

      id = R.id.textView;
      ConstraintLayout textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.tv_accept_higherPrice;
      FontTextView tvAcceptHigherPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvAcceptHigherPrice == null) {
        break missingId;
      }

      id = R.id.tv_heading;
      FontTextView tvHeading = ViewBindings.findChildViewById(rootView, id);
      if (tvHeading == null) {
        break missingId;
      }

      id = R.id.tv_km_static_text;
      FontTextView tvKmStaticText = ViewBindings.findChildViewById(rootView, id);
      if (tvKmStaticText == null) {
        break missingId;
      }

      id = R.id.tv_min_static_text;
      FontTextView tvMinStaticText = ViewBindings.findChildViewById(rootView, id);
      if (tvMinStaticText == null) {
        break missingId;
      }

      id = R.id.tv_minimum_fare;
      FontTextView tvMinimumFare = ViewBindings.findChildViewById(rootView, id);
      if (tvMinimumFare == null) {
        break missingId;
      }

      id = R.id.tv_minimum_fare_static_text;
      FontTextView tvMinimumFareStaticText = ViewBindings.findChildViewById(rootView, id);
      if (tvMinimumFareStaticText == null) {
        break missingId;
      }

      id = R.id.tv_normalFare;
      FontTextView tvNormalFare = ViewBindings.findChildViewById(rootView, id);
      if (tvNormalFare == null) {
        break missingId;
      }

      id = R.id.tv_peak_price_percentage;
      FontTextView tvPeakPricePercentage = ViewBindings.findChildViewById(rootView, id);
      if (tvPeakPricePercentage == null) {
        break missingId;
      }

      id = R.id.tv_per_distance;
      FontTextView tvPerDistance = ViewBindings.findChildViewById(rootView, id);
      if (tvPerDistance == null) {
        break missingId;
      }

      id = R.id.tv_per_minutes;
      FontTextView tvPerMinutes = ViewBindings.findChildViewById(rootView, id);
      if (tvPerMinutes == null) {
        break missingId;
      }

      id = R.id.tv_tryLater_higherPrice;
      FontTextView tvTryLaterHigherPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvTryLaterHigherPrice == null) {
        break missingId;
      }

      return new AppPeekPricingBinding((RelativeLayout) rootView, PeakPriceDescription, cvAccept,
          fareInnerContentGuidline, guideline, headerLayout, imgvuCloseIcon, peakCircle, textView,
          tvAcceptHigherPrice, tvHeading, tvKmStaticText, tvMinStaticText, tvMinimumFare,
          tvMinimumFareStaticText, tvNormalFare, tvPeakPricePercentage, tvPerDistance, tvPerMinutes,
          tvTryLaterHigherPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
