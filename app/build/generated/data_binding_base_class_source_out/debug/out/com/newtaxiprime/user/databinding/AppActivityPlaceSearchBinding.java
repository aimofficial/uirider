// Generated by view binder compiler. Do not edit!
package com.newtaxiprime.user.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.newtaxiprime.user.R;
import com.newtaxiprime.user.appcommon.custompalette.FontEditText;
import com.newtaxiprime.user.appcommon.custompalette.FontTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AppActivityPlaceSearchBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ScrollView addressSearch;

  @NonNull
  public final ImageView arrow;

  @NonNull
  public final ImageView arrows;

  @NonNull
  public final CardView cvImage;

  @NonNull
  public final ImageView destPoint;

  @NonNull
  public final FontEditText destadddress;

  @NonNull
  public final FontTextView destclose;

  @NonNull
  public final FontTextView dropDone;

  @NonNull
  public final FontTextView homeaddress;

  @NonNull
  public final LinearLayout homelayoyt;

  @NonNull
  public final FontTextView hometext;

  @NonNull
  public final ImageView ivHome;

  @NonNull
  public final ImageView ivLocation;

  @NonNull
  public final ImageView ivWork;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final RecyclerView locationPlacesearch;

  @NonNull
  public final ProgressBar pbAddressSearchbarLoading;

  @NonNull
  public final RelativeLayout picDrop;

  @NonNull
  public final ImageView pickupPoint;

  @NonNull
  public final FontEditText pickupaddress;

  @NonNull
  public final RelativeLayout pickupaddresslay;

  @NonNull
  public final FontTextView pickupclose;

  @NonNull
  public final ImageView pinMap;

  @NonNull
  public final RelativeLayout relativeLayout2;

  @NonNull
  public final RelativeLayout rltHome;

  @NonNull
  public final RelativeLayout rltWork;

  @NonNull
  public final FontTextView scheduleDateTime;

  @NonNull
  public final RelativeLayout schedulerideLayout;

  @NonNull
  public final RelativeLayout search;

  @NonNull
  public final LinearLayout setlocationOnmap;

  @NonNull
  public final TextView vrLine;

  @NonNull
  public final FontTextView workaddress;

  @NonNull
  public final LinearLayout worklayout;

  @NonNull
  public final FontTextView worktext;

  private AppActivityPlaceSearchBinding(@NonNull RelativeLayout rootView,
      @NonNull ScrollView addressSearch, @NonNull ImageView arrow, @NonNull ImageView arrows,
      @NonNull CardView cvImage, @NonNull ImageView destPoint, @NonNull FontEditText destadddress,
      @NonNull FontTextView destclose, @NonNull FontTextView dropDone,
      @NonNull FontTextView homeaddress, @NonNull LinearLayout homelayoyt,
      @NonNull FontTextView hometext, @NonNull ImageView ivHome, @NonNull ImageView ivLocation,
      @NonNull ImageView ivWork, @NonNull LinearLayout linearLayout,
      @NonNull RecyclerView locationPlacesearch, @NonNull ProgressBar pbAddressSearchbarLoading,
      @NonNull RelativeLayout picDrop, @NonNull ImageView pickupPoint,
      @NonNull FontEditText pickupaddress, @NonNull RelativeLayout pickupaddresslay,
      @NonNull FontTextView pickupclose, @NonNull ImageView pinMap,
      @NonNull RelativeLayout relativeLayout2, @NonNull RelativeLayout rltHome,
      @NonNull RelativeLayout rltWork, @NonNull FontTextView scheduleDateTime,
      @NonNull RelativeLayout schedulerideLayout, @NonNull RelativeLayout search,
      @NonNull LinearLayout setlocationOnmap, @NonNull TextView vrLine,
      @NonNull FontTextView workaddress, @NonNull LinearLayout worklayout,
      @NonNull FontTextView worktext) {
    this.rootView = rootView;
    this.addressSearch = addressSearch;
    this.arrow = arrow;
    this.arrows = arrows;
    this.cvImage = cvImage;
    this.destPoint = destPoint;
    this.destadddress = destadddress;
    this.destclose = destclose;
    this.dropDone = dropDone;
    this.homeaddress = homeaddress;
    this.homelayoyt = homelayoyt;
    this.hometext = hometext;
    this.ivHome = ivHome;
    this.ivLocation = ivLocation;
    this.ivWork = ivWork;
    this.linearLayout = linearLayout;
    this.locationPlacesearch = locationPlacesearch;
    this.pbAddressSearchbarLoading = pbAddressSearchbarLoading;
    this.picDrop = picDrop;
    this.pickupPoint = pickupPoint;
    this.pickupaddress = pickupaddress;
    this.pickupaddresslay = pickupaddresslay;
    this.pickupclose = pickupclose;
    this.pinMap = pinMap;
    this.relativeLayout2 = relativeLayout2;
    this.rltHome = rltHome;
    this.rltWork = rltWork;
    this.scheduleDateTime = scheduleDateTime;
    this.schedulerideLayout = schedulerideLayout;
    this.search = search;
    this.setlocationOnmap = setlocationOnmap;
    this.vrLine = vrLine;
    this.workaddress = workaddress;
    this.worklayout = worklayout;
    this.worktext = worktext;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AppActivityPlaceSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AppActivityPlaceSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.app_activity_place_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AppActivityPlaceSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address_search;
      ScrollView addressSearch = ViewBindings.findChildViewById(rootView, id);
      if (addressSearch == null) {
        break missingId;
      }

      id = R.id.arrow;
      ImageView arrow = ViewBindings.findChildViewById(rootView, id);
      if (arrow == null) {
        break missingId;
      }

      id = R.id.arrows;
      ImageView arrows = ViewBindings.findChildViewById(rootView, id);
      if (arrows == null) {
        break missingId;
      }

      id = R.id.cv_image;
      CardView cvImage = ViewBindings.findChildViewById(rootView, id);
      if (cvImage == null) {
        break missingId;
      }

      id = R.id.dest_point;
      ImageView destPoint = ViewBindings.findChildViewById(rootView, id);
      if (destPoint == null) {
        break missingId;
      }

      id = R.id.destadddress;
      FontEditText destadddress = ViewBindings.findChildViewById(rootView, id);
      if (destadddress == null) {
        break missingId;
      }

      id = R.id.destclose;
      FontTextView destclose = ViewBindings.findChildViewById(rootView, id);
      if (destclose == null) {
        break missingId;
      }

      id = R.id.drop_done;
      FontTextView dropDone = ViewBindings.findChildViewById(rootView, id);
      if (dropDone == null) {
        break missingId;
      }

      id = R.id.homeaddress;
      FontTextView homeaddress = ViewBindings.findChildViewById(rootView, id);
      if (homeaddress == null) {
        break missingId;
      }

      id = R.id.homelayoyt;
      LinearLayout homelayoyt = ViewBindings.findChildViewById(rootView, id);
      if (homelayoyt == null) {
        break missingId;
      }

      id = R.id.hometext;
      FontTextView hometext = ViewBindings.findChildViewById(rootView, id);
      if (hometext == null) {
        break missingId;
      }

      id = R.id.iv_home;
      ImageView ivHome = ViewBindings.findChildViewById(rootView, id);
      if (ivHome == null) {
        break missingId;
      }

      id = R.id.iv_location;
      ImageView ivLocation = ViewBindings.findChildViewById(rootView, id);
      if (ivLocation == null) {
        break missingId;
      }

      id = R.id.iv_work;
      ImageView ivWork = ViewBindings.findChildViewById(rootView, id);
      if (ivWork == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.location_placesearch;
      RecyclerView locationPlacesearch = ViewBindings.findChildViewById(rootView, id);
      if (locationPlacesearch == null) {
        break missingId;
      }

      id = R.id.pb_address_searchbar_loading;
      ProgressBar pbAddressSearchbarLoading = ViewBindings.findChildViewById(rootView, id);
      if (pbAddressSearchbarLoading == null) {
        break missingId;
      }

      id = R.id.pic_drop;
      RelativeLayout picDrop = ViewBindings.findChildViewById(rootView, id);
      if (picDrop == null) {
        break missingId;
      }

      id = R.id.pickup_point;
      ImageView pickupPoint = ViewBindings.findChildViewById(rootView, id);
      if (pickupPoint == null) {
        break missingId;
      }

      id = R.id.pickupaddress;
      FontEditText pickupaddress = ViewBindings.findChildViewById(rootView, id);
      if (pickupaddress == null) {
        break missingId;
      }

      id = R.id.pickupaddresslay;
      RelativeLayout pickupaddresslay = ViewBindings.findChildViewById(rootView, id);
      if (pickupaddresslay == null) {
        break missingId;
      }

      id = R.id.pickupclose;
      FontTextView pickupclose = ViewBindings.findChildViewById(rootView, id);
      if (pickupclose == null) {
        break missingId;
      }

      id = R.id.pin_map;
      ImageView pinMap = ViewBindings.findChildViewById(rootView, id);
      if (pinMap == null) {
        break missingId;
      }

      id = R.id.relativeLayout2;
      RelativeLayout relativeLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout2 == null) {
        break missingId;
      }

      id = R.id.rlt_home;
      RelativeLayout rltHome = ViewBindings.findChildViewById(rootView, id);
      if (rltHome == null) {
        break missingId;
      }

      id = R.id.rlt_work;
      RelativeLayout rltWork = ViewBindings.findChildViewById(rootView, id);
      if (rltWork == null) {
        break missingId;
      }

      id = R.id.schedule_date_time;
      FontTextView scheduleDateTime = ViewBindings.findChildViewById(rootView, id);
      if (scheduleDateTime == null) {
        break missingId;
      }

      id = R.id.scheduleride_layout;
      RelativeLayout schedulerideLayout = ViewBindings.findChildViewById(rootView, id);
      if (schedulerideLayout == null) {
        break missingId;
      }

      id = R.id.search;
      RelativeLayout search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.setlocation_onmap;
      LinearLayout setlocationOnmap = ViewBindings.findChildViewById(rootView, id);
      if (setlocationOnmap == null) {
        break missingId;
      }

      id = R.id.vr_line;
      TextView vrLine = ViewBindings.findChildViewById(rootView, id);
      if (vrLine == null) {
        break missingId;
      }

      id = R.id.workaddress;
      FontTextView workaddress = ViewBindings.findChildViewById(rootView, id);
      if (workaddress == null) {
        break missingId;
      }

      id = R.id.worklayout;
      LinearLayout worklayout = ViewBindings.findChildViewById(rootView, id);
      if (worklayout == null) {
        break missingId;
      }

      id = R.id.worktext;
      FontTextView worktext = ViewBindings.findChildViewById(rootView, id);
      if (worktext == null) {
        break missingId;
      }

      return new AppActivityPlaceSearchBinding((RelativeLayout) rootView, addressSearch, arrow,
          arrows, cvImage, destPoint, destadddress, destclose, dropDone, homeaddress, homelayoyt,
          hometext, ivHome, ivLocation, ivWork, linearLayout, locationPlacesearch,
          pbAddressSearchbarLoading, picDrop, pickupPoint, pickupaddress, pickupaddresslay,
          pickupclose, pinMap, relativeLayout2, rltHome, rltWork, scheduleDateTime,
          schedulerideLayout, search, setlocationOnmap, vrLine, workaddress, worklayout, worktext);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
