// Generated by view binder compiler. Do not edit!
package com.newtaxiprime.user.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.newtaxiprime.user.R;
import com.newtaxiprime.user.appcommon.custompalette.FontTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AppActivityDriverContactBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout callbutton;

  @NonNull
  public final AppCommonHeaderBinding commonHeader;

  @NonNull
  public final RelativeLayout contactLayout;

  @NonNull
  public final FontTextView driverNameContact;

  @NonNull
  public final FontTextView driverPhoneContact;

  @NonNull
  public final LinearLayout messageButton;

  private AppActivityDriverContactBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout callbutton, @NonNull AppCommonHeaderBinding commonHeader,
      @NonNull RelativeLayout contactLayout, @NonNull FontTextView driverNameContact,
      @NonNull FontTextView driverPhoneContact, @NonNull LinearLayout messageButton) {
    this.rootView = rootView;
    this.callbutton = callbutton;
    this.commonHeader = commonHeader;
    this.contactLayout = contactLayout;
    this.driverNameContact = driverNameContact;
    this.driverPhoneContact = driverPhoneContact;
    this.messageButton = messageButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AppActivityDriverContactBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AppActivityDriverContactBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.app_activity_driver_contact, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AppActivityDriverContactBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.callbutton;
      LinearLayout callbutton = ViewBindings.findChildViewById(rootView, id);
      if (callbutton == null) {
        break missingId;
      }

      id = R.id.common_header;
      View commonHeader = ViewBindings.findChildViewById(rootView, id);
      if (commonHeader == null) {
        break missingId;
      }
      AppCommonHeaderBinding binding_commonHeader = AppCommonHeaderBinding.bind(commonHeader);

      id = R.id.contact_layout;
      RelativeLayout contactLayout = ViewBindings.findChildViewById(rootView, id);
      if (contactLayout == null) {
        break missingId;
      }

      id = R.id.driver_name_contact;
      FontTextView driverNameContact = ViewBindings.findChildViewById(rootView, id);
      if (driverNameContact == null) {
        break missingId;
      }

      id = R.id.driver_phone_contact;
      FontTextView driverPhoneContact = ViewBindings.findChildViewById(rootView, id);
      if (driverPhoneContact == null) {
        break missingId;
      }

      id = R.id.messageButton;
      LinearLayout messageButton = ViewBindings.findChildViewById(rootView, id);
      if (messageButton == null) {
        break missingId;
      }

      return new AppActivityDriverContactBinding((LinearLayout) rootView, callbutton,
          binding_commonHeader, contactLayout, driverNameContact, driverPhoneContact,
          messageButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
