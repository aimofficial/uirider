// Generated by view binder compiler. Do not edit!
package com.newtaxiprime.user.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.newtaxiprime.user.R;
import com.newtaxiprime.user.appcommon.custompalette.FontTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AppScheduleLayoutBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final FontTextView amount;

  @NonNull
  public final FontTextView cancel;

  @NonNull
  public final LinearLayout cancelLay;

  @NonNull
  public final FontTextView carType;

  @NonNull
  public final FontTextView dateAndTime;

  @NonNull
  public final LinearLayout datetimeLayout;

  @NonNull
  public final ImageView destPoint;

  @NonNull
  public final FontTextView destadddress;

  @NonNull
  public final FontTextView edit;

  @NonNull
  public final LinearLayout picDrop;

  @NonNull
  public final RelativeLayout picDrpLay;

  @NonNull
  public final ImageView pickupPoint;

  @NonNull
  public final FontTextView pickupaddress;

  @NonNull
  public final RelativeLayout relativeLayout2;

  @NonNull
  public final RelativeLayout soonLine;

  @NonNull
  public final RelativeLayout timeCartype;

  @NonNull
  public final FontTextView tripTupe;

  @NonNull
  public final TextView vrLine;

  private AppScheduleLayoutBinding(@NonNull RelativeLayout rootView, @NonNull FontTextView amount,
      @NonNull FontTextView cancel, @NonNull LinearLayout cancelLay, @NonNull FontTextView carType,
      @NonNull FontTextView dateAndTime, @NonNull LinearLayout datetimeLayout,
      @NonNull ImageView destPoint, @NonNull FontTextView destadddress, @NonNull FontTextView edit,
      @NonNull LinearLayout picDrop, @NonNull RelativeLayout picDrpLay,
      @NonNull ImageView pickupPoint, @NonNull FontTextView pickupaddress,
      @NonNull RelativeLayout relativeLayout2, @NonNull RelativeLayout soonLine,
      @NonNull RelativeLayout timeCartype, @NonNull FontTextView tripTupe,
      @NonNull TextView vrLine) {
    this.rootView = rootView;
    this.amount = amount;
    this.cancel = cancel;
    this.cancelLay = cancelLay;
    this.carType = carType;
    this.dateAndTime = dateAndTime;
    this.datetimeLayout = datetimeLayout;
    this.destPoint = destPoint;
    this.destadddress = destadddress;
    this.edit = edit;
    this.picDrop = picDrop;
    this.picDrpLay = picDrpLay;
    this.pickupPoint = pickupPoint;
    this.pickupaddress = pickupaddress;
    this.relativeLayout2 = relativeLayout2;
    this.soonLine = soonLine;
    this.timeCartype = timeCartype;
    this.tripTupe = tripTupe;
    this.vrLine = vrLine;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AppScheduleLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AppScheduleLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.app_schedule_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AppScheduleLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amount;
      FontTextView amount = ViewBindings.findChildViewById(rootView, id);
      if (amount == null) {
        break missingId;
      }

      id = R.id.cancel;
      FontTextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.cancel_lay;
      LinearLayout cancelLay = ViewBindings.findChildViewById(rootView, id);
      if (cancelLay == null) {
        break missingId;
      }

      id = R.id.car_type;
      FontTextView carType = ViewBindings.findChildViewById(rootView, id);
      if (carType == null) {
        break missingId;
      }

      id = R.id.date_and_time;
      FontTextView dateAndTime = ViewBindings.findChildViewById(rootView, id);
      if (dateAndTime == null) {
        break missingId;
      }

      id = R.id.datetime_layout;
      LinearLayout datetimeLayout = ViewBindings.findChildViewById(rootView, id);
      if (datetimeLayout == null) {
        break missingId;
      }

      id = R.id.dest_point;
      ImageView destPoint = ViewBindings.findChildViewById(rootView, id);
      if (destPoint == null) {
        break missingId;
      }

      id = R.id.destadddress;
      FontTextView destadddress = ViewBindings.findChildViewById(rootView, id);
      if (destadddress == null) {
        break missingId;
      }

      id = R.id.edit;
      FontTextView edit = ViewBindings.findChildViewById(rootView, id);
      if (edit == null) {
        break missingId;
      }

      id = R.id.pic_drop;
      LinearLayout picDrop = ViewBindings.findChildViewById(rootView, id);
      if (picDrop == null) {
        break missingId;
      }

      id = R.id.pic_drp_lay;
      RelativeLayout picDrpLay = ViewBindings.findChildViewById(rootView, id);
      if (picDrpLay == null) {
        break missingId;
      }

      id = R.id.pickup_point;
      ImageView pickupPoint = ViewBindings.findChildViewById(rootView, id);
      if (pickupPoint == null) {
        break missingId;
      }

      id = R.id.pickupaddress;
      FontTextView pickupaddress = ViewBindings.findChildViewById(rootView, id);
      if (pickupaddress == null) {
        break missingId;
      }

      id = R.id.relativeLayout2;
      RelativeLayout relativeLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout2 == null) {
        break missingId;
      }

      id = R.id.soon_line;
      RelativeLayout soonLine = ViewBindings.findChildViewById(rootView, id);
      if (soonLine == null) {
        break missingId;
      }

      id = R.id.time_cartype;
      RelativeLayout timeCartype = ViewBindings.findChildViewById(rootView, id);
      if (timeCartype == null) {
        break missingId;
      }

      id = R.id.trip_tupe;
      FontTextView tripTupe = ViewBindings.findChildViewById(rootView, id);
      if (tripTupe == null) {
        break missingId;
      }

      id = R.id.vr_line;
      TextView vrLine = ViewBindings.findChildViewById(rootView, id);
      if (vrLine == null) {
        break missingId;
      }

      return new AppScheduleLayoutBinding((RelativeLayout) rootView, amount, cancel, cancelLay,
          carType, dateAndTime, datetimeLayout, destPoint, destadddress, edit, picDrop, picDrpLay,
          pickupPoint, pickupaddress, relativeLayout2, soonLine, timeCartype, tripTupe, vrLine);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
